#pragma once

#include <meta>
#include <cstdio>
#include <print>
#include <ranges>
#include <type_traits>
#include <utility>
#include <vector>
#include <string>
#include <string_view>

#include <print>

#include <rsl/span>
#include <rsl/string_view>
#include <rsl/expect>

// #include "_impl/default_construct.hpp"
#include <rsl/cli/annotations.hpp>
#include <rsl/cli/spec.hpp>

#include <rsl/json5/json5.hpp>
#include "rsl/_impl/default_construct.hpp"

namespace rsl {

class ProgramInfo {
  static std::string& get_name();

public:
  static void set_name(std::string_view arg0);
  static std::string_view name() { return get_name(); }
};

class config;

namespace _cli_impl {
struct ParsedArgs {
  Spec spec;
  std::string_view program_name;
  std::vector<Argument::Unevaluated> arguments;
  std::vector<Option::Unevaluated> options;

  constexpr ParsedArgs(Spec const& spec, std::span<std::string_view> args_in) : spec(spec) {
    auto parser                 = ArgParser{args_in};
    auto& [args, cursor, error] = parser;

    auto program_name = args_in[0];
    cursor            = 1;

    std::string argument_error;
    if (!parse_arguments(parser) && parser.has_error()) {
      // reset parser error state, get its error
      std::swap(argument_error, error);
    }

    // even if parsing arguments fail, try options - some might be commands that we can execute
    // anyway
    if (!parse_options(parser) && parser.has_error()) {
      std::println("{}", error);
      std::exit(1);
    }

    // finally, report argument parsing errors
    if (!argument_error.empty()) {
      std::println("{}", argument_error);
      std::exit(1);
    }
  }

  bool parse_arguments(ArgParser& parser) {
    for (auto arg : spec.arguments) {
      auto argument = arg.parse(parser);
      if (!argument) {
        if (!arg.is_optional) {
          parser.set_error("Missing required argument {}", arg.name);
          return false;
        }
        // failed to parse argument - bail out
        return true;
      }
      arguments.push_back(*argument);
    }
    return true;
  }

  bool parse_options(ArgParser& parser) {
    while (parser.valid()) {
      auto current = parser.current();

      if (!current.starts_with('-')) {
        parser.set_error("Expected an option.");
        return false;
      } else {
        current.remove_prefix(1);
      }

      if (current.starts_with('-')) {
        // long option
        current.remove_prefix(1);

      } else {
        // short option
      }

      bool found = false;
      for (auto opt : spec.options) {
        if (auto unevaluated = opt.parse(parser); unevaluated) {
          if (opt.run_early) {
            (*unevaluated)(nullptr);
          } else {
            options.push_back(*unevaluated);
          }
          found = true;
        }
      }

      if (parser.has_error()) {
        return false;
      }

      if (!found) {
        parser.set_error("Could not find option `{}`", parser.current());
        return false;
      }
    }
    return true;
  }
};

template <typename T>
ParsedArgs parse(std::span<std::string_view> args_in) {
  static constexpr _cli_impl::Spec spec{^^T};
  return {spec, args_in};
}

template <typename T>
_impl::ArgumentTuple<T> tuple_from_args(std::span<Argument::Unevaluated> args) {
  // TODO only get positional
  _impl::ArgumentTuple<T> args_tuple;
  if constexpr (std::derived_from<T, config>) {
    // only load config if T is configurable
    auto config = json5::load(T::get_config_path());
    config.template update_argtuple<T>(args_tuple);
  }

  for (auto argument : args) {
    argument(&args_tuple);
  }
  return args_tuple;
}

template <typename T>
T construct_from_args(std::span<Argument::Unevaluated> args) {
  auto args_tuple = tuple_from_args<T>(args);
  return _impl::default_construct<T>(args_tuple);
}

template <typename T>
void apply_args(T&& object, std::span<Argument::Unevaluated> args) {
  using raw_t     = std::remove_cvref_t<T>;
  auto args_tuple = tuple_from_args<raw_t>(args);

  constexpr auto ctx = std::meta::access_context::current();
  constexpr auto members =
      std::define_static_array(nonstatic_data_members_of(dealias(^^raw_t), ctx));
  constexpr auto base_count = bases_of(dealias(^^raw_t), ctx).size();

  template for (constexpr auto Idx : std::views::iota(0ZU, members.size())) {
    if (auto value = get<base_count + Idx>(args_tuple); value) {
      object.[:members[Idx]:] = *value;
    }
  }
}

template <typename T>
void apply_options(T&& object, std::span<Option::Unevaluated> options) {
  for (auto&& option : options) {
    option(&object);
  }
}
}  // namespace _cli_impl

template <typename T>
void parse_args(T&& object, std::vector<std::string_view> args_in) {
  auto args = _cli_impl::parse<std::remove_cvref_t<T>>(args_in);

  ProgramInfo::set_name(args.program_name);
  _cli_impl::apply_args(object, args.arguments);
  _cli_impl::apply_options(object, args.options);
}

template <typename T>
void parse_args(T&& object, int argc, char** argv) {
  return parse_args(std::forward<T>(object), {argv, argv + argc});
}

template <typename T>
T load_config(std::vector<std::string_view> args_in) {
  auto args = _cli_impl::parse<T>(args_in);

  ProgramInfo::set_name(args.program_name);
  T object = _cli_impl::construct_from_args<T>(args.arguments);
  _cli_impl::apply_options(object, args.options);

  return object;
}

template <typename T>
T load_config(int argc, char** argv) {
  return load_config<T>({argv, argv + argc});
  // compile_error(display_string_of(dealias(^^_impl::ArgumentTuple<T>)));
}

namespace _cli_impl {
void print_help(_cli_impl::Spec const& spec,
                std::string_view program_name,
                std::string_view description);

template <typename T>
[[noreturn]]
void default_help() {
  constexpr static _cli_impl::Spec spec{remove_cvref(^^T)};
  auto program_name = ProgramInfo::name();
  auto description  = std::string_view{};
  if (auto desc = annotation_of_type<annotations::Description>(^^T); desc) {
    description = desc->data;
  }
  print_help(spec, program_name, description);
  std::exit(0);
}
}  // namespace _cli_impl

struct config {
  static std::string& get_config_path();

  template <typename T>
  [[= annotations::option]] [[noreturn]]
  static void help() {
    _cli_impl::default_help<T>();
  }
};

struct cli {
  static constexpr auto option      = annotations::option;
  static constexpr auto positional  = annotations::positional;
  static constexpr auto value       = rsl::placeholders::_0;
  static constexpr auto flag        = annotations::flag;
  using shorthand   = annotations::Shorthand;
  using description = annotations::Description;

  template <typename T>
  void parse_args(this T&& self, int argc, char** argv) {
    return rsl::parse_args(std::forward<T>(self), {argv, argv + argc});
  }

  template <typename T>
    requires(std::derived_from<T, config>)
  [[= option]] static void config_path(std::string new_path) {
    T::get_config_path() = std::move(new_path);
  }

  template <typename T>
  [[= option]] [[noreturn]]
  static void help() {
    _cli_impl::default_help<T>();
  }
};

}  // namespace rsl